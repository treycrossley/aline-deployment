pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'member-dashboard'
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '590184030834' // Replace with your AWS account ID
        AWS_CREDENTIALS = 'aws-credentials-id' // Replace with the ID of your AWS credentials in Jenkins
        ECR_REPO = 'member-dashboard-tc'
        K8S_NAMESPACE = 'default' // Kubernetes namespace where you want to deploy
        CLUSTER_NAME = "aline_cluster_tc"
        GIT_CREDENTIALS = 'gitlab-login-credential' // Replace with the ID of your GitLab credentials in Jenkins
        GIT_URL = 'https://git1.smoothstack.com/cohorts/2024/2024-03-11_cloud/organizations/care-bear-cuddle-buddies/trey-crossley/aline-financial/member-dashboard' // Replace with the Git URL of your gateway repository
       
    }

    options {
        gitLabConnection('gitlab-connect')
        gitlabBuilds(builds: ['build'])
    }

    tools {
        // Define Node.js tool with the specified name
        nodejs 'NodeJS'
        maven 'maven'
        dockerTool 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                updateGitlabCommitStatus name: 'build', state: 'running' // Update GitLab commit status to 'running'
                script {
                    // Checkout main repository
                    checkout([$class: 'GitSCM',
                            branches: [[name: 'develop']],
                            userRemoteConfigs: [[url: "${GIT_URL}", credentialsId: "${GIT_CREDENTIALS}"]]])
                }
            }
        }


        stage('Build') {
            steps {
                sh 'npm install' // Install dependencies
                sh 'npm run build' // Build Angular app for production
            }
        }

        stage('SonarQube analysis') {
            steps {
                script {
                    scannerHome = tool 'sonar-scanner'
                }
                withSonarQubeEnv('sonar') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=member-dashboard-sonarqube -Dsonar.projectName='member-dashboard-sonarqube'"
                }
            }
        }


        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE}:${env.BUILD_ID} .
                """
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDENTIALS}") {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        docker tag ${DOCKER_IMAGE}:${env.BUILD_ID} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${env.BUILD_ID}
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${env.BUILD_ID}
                    """
                }
            }
        }

        stage('Update Kubeconfig') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDENTIALS}") {
                    // Run the aws eks update-kubeconfig command
                    sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDENTIALS}") {
                    sh """
                        kubectl set image deployment/member-dashboard \
                        member-dashboard=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${env.BUILD_ID} \
                        -n ${K8S_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
        aborted {
            updateGitlabCommitStatus name: 'build', state: 'canceled'
        }
    }
}
