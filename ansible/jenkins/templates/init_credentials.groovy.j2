import com.cloudbees.plugins.credentials.Credentials
import com.cloudbees.plugins.credentials.CredentialsScope
import com.cloudbees.plugins.credentials.CredentialsMatchers
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
import com.cloudbees.plugins.credentials.SystemCredentialsProvider
import com.dabsquared.gitlabjenkins.connection.GitLabApiTokenImpl
import com.dabsquared.gitlabjenkins.connection.GitLabConnection
import hudson.util.Secret

// Define your SonarQube token details
String sonarqubeTokenString = "{{ sonarqube_api_token }}"
Secret sonarqubeToken = new Secret(sonarqubeTokenString)
String sonarqubeCredentialsId = "sonarqube-access" // Unique ID for SonarQube token

// Check if the SonarQube token credentials already exist
Credentials sonarqubeExistingCredentials = CredentialsMatchers.firstOrNull(
    SystemCredentialsProvider.instance.getCredentials(),
    CredentialsMatchers.withId(sonarqubeCredentialsId)
)

if (sonarqubeExistingCredentials) {
    // Remove existing SonarQube token credentials
    SystemCredentialsProvider.instance.removeCredentials(
        Domain.global(),
        sonarqubeExistingCredentials
    )
    println("Removed existing SonarQube token credentials with ID: ${sonarqubeCredentialsId}")
}

// Create SonarQube token credentials object
StringCredentialsImpl sonarqubeTokenCredentials = new StringCredentialsImpl(
    CredentialsScope.GLOBAL,
    sonarqubeCredentialsId,
    "User token for SonarQube",
    sonarqubeToken
)

// Add SonarQube token credentials to the Jenkins instance
SystemCredentialsProvider.instance.getCredentials().add(sonarqubeTokenCredentials)


// Define your AWS credentials details
String awsAccessKeyId = "{{ aws_access_key_id }}"
String awsSecretAccessKey = "{{ aws_secret_access_key }}"
String awsCredentialsId = "aws-credentials-id" // Choose a unique ID for your credentials

// Check if the AWS credentials already exist
Credentials awsExistingCredentials = CredentialsMatchers.firstOrNull(
    SystemCredentialsProvider.instance.credentials,
    CredentialsMatchers.withId(awsCredentialsId)
)

if (awsExistingCredentials) {
    // Remove existing AWS credentials
    SystemCredentialsProvider.instance.removeCredentials(
        Domain.global(),
        awsExistingCredentials
    )
    println("Removed existing AWS credentials with ID: ${awsCredentialsId}")
}

// Create AWS credentials object
UsernamePasswordCredentialsImpl awsCredentials = new UsernamePasswordCredentialsImpl(
    CredentialsScope.GLOBAL,
    awsCredentialsId,
    "AWS credentials",
    awsAccessKeyId,
    awsSecretAccessKey
)

// Add AWS credentials to the Jenkins instance
SystemCredentialsProvider.instance.getCredentials().add(awsCredentials)
SystemCredentialsProvider.instance.save()


// Define your GitLab API token details
String gitlabApiTokenString = "{{ gitlab_api_token }}"
Secret gitlabApiToken = new Secret(gitlabApiTokenString)
String gitlabCredentialsId = "gitlab-api-token" // Choose a unique ID for your GitLab API token credentials

// Check if the GitLab API token credentials already exist
Credentials gitlabExistingCredentials = CredentialsMatchers.firstOrNull(
    SystemCredentialsProvider.instance.getCredentials(),
    CredentialsMatchers.withId(gitlabCredentialsId)
)

if (gitlabExistingCredentials) {
    // Remove existing GitLab API token credentials
    SystemCredentialsProvider.instance.removeCredentials(
        Domain.global(),
        gitlabExistingCredentials
    )
    println("Removed existing GitLab API token credentials with ID: ${gitlabCredentialsId}")
}

// Create GitLab API token credentials object
GitLabApiTokenImpl gitlabApiTokenCredentials = new GitLabApiTokenImpl(
    CredentialsScope.GLOBAL,
    gitlabCredentialsId,
    "Gitlab Credentials",
    gitlabApiToken
)

// Add GitLab API token credentials to the Jenkins instance
SystemCredentialsProvider.instance.getCredentials().add(gitlabApiTokenCredentials)



// Define your GitLab username and password
String gitlabUsernameForCredentials = "jenkins"
String gitlabCredentialsIdForCredentials = "gitlab-login-credential" // Choose a unique ID for your GitLab username/password credentials

// Check if the GitLab username/password credentials already exist
Credentials gitlabExistingCredentialsForCredentials = CredentialsMatchers.firstOrNull(
    SystemCredentialsProvider.instance.getCredentials(),
    CredentialsMatchers.withId(gitlabCredentialsIdForCredentials)
)

if (gitlabExistingCredentialsForCredentials) {
    // Remove existing GitLab username/password credentials
    SystemCredentialsProvider.instance.removeCredentials(
        Domain.global(),
        gitlabExistingCredentialsForCredentials
    )
    println("Removed existing GitLab username/password credentials with ID: ${gitlabCredentialsIdForCredentials}")
}

// Create GitLab username/password credentials object
UsernamePasswordCredentialsImpl gitlabUsernamePasswordCredentialsForCredentials = new UsernamePasswordCredentialsImpl(
    CredentialsScope.GLOBAL,
    gitlabCredentialsIdForCredentials,
    "Gitlab Username/Password Credentials",
    gitlabUsernameForCredentials,
    gitlabApiTokenString
)

// Add GitLab username/password credentials to the Jenkins instance
SystemCredentialsProvider.instance.getCredentials().add(gitlabUsernamePasswordCredentialsForCredentials)
SystemCredentialsProvider.instance.save()
println("credentials saved")

//TODO auto set the Jenkins server GitLab configurations (configName, host, credentials)
// TODO: Auto setup Jenkins Integration on Gitlab side?
